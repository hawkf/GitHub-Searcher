{"version":3,"sources":["services/api.ts","components/search-form.tsx","components/user-item.tsx","components/main-page.tsx","components/user-features.tsx","components/repositories-list.tsx","utils.ts","components/user-information.tsx","const.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["createApi","axios","create","baseURL","api","SearchForm","props","inputRef","useRef","className","ref","onChange","get","current","value","then","response","console","log","data","onChangeHandler","catch","swal","placeholder","type","UserItem","user","history","useHistory","USER_PAGE","login","onClick","push","src","avatar_url","width","height","alt","name","public_repos","MainPage","users","map","item","UserFeatures","email","location","created_at","followers","following","RepositoriesList","useState","repositories","setRepositories","filteredRepositories","setFilteredRepositories","inputText","useEffect","slice","trim","length","resultList","filter","text","substring","indexOf","url","html_url","window","open","forks_count","stargazers_count","UserInformation","currentUser","setCurrentUser","userLogin","useParams","AppRoute","App","setUsers","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a8d879c5.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst BACKEND_URL = 'https://api.github.com/users/';\r\n\r\nexport const createApi = () => {\r\n  const api = axios.create({\r\n    baseURL: BACKEND_URL    \r\n  });\r\n\r\n  return api;\r\n};\r\n","import { useRef } from \"react\";\r\nimport { createApi } from \"../services/api\";\r\nimport { User } from \"../type-const\";\r\nimport swal from \"sweetalert\";\r\n\r\nconst api = createApi();\r\n\r\nexport const SearchForm: React.FC<{ onChangeHandler(user: User): void }> = (\r\n  props\r\n) => {\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const onInputHanldler = (): void => {\r\n    api\r\n      .get(inputRef.current!.value)\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        props.onChangeHandler(response.data);\r\n      })\r\n      .catch(() => swal(\"Произошла ошибка во время получения данных\"));\r\n  };\r\n\r\n  return (\r\n    <form className='search-form'>\r\n      <input\r\n        ref={inputRef}\r\n        onChange={onInputHanldler}\r\n        className='search-form__input'\r\n        placeholder='Search for Users'\r\n        type='text'\r\n      />\r\n    </form>\r\n  );\r\n};\r\n","import { useHistory } from \"react-router-dom\";\r\nimport { User } from \"../type-const\";\r\n\r\nexport const UserItem: React.FC<{ user: User }> = (props) => {\r\n  const { user } = props;\r\n  const history = useHistory();\r\n  const USER_PAGE = `/user/${user.login}`;\r\n\r\n  const onClickHandle = (): void => {\r\n    history.push(USER_PAGE);\r\n  };\r\n\r\n  return (\r\n    <li onClick={onClickHandle} className='users-list__item'>\r\n      <img\r\n        className='users-list__item-photo'\r\n        src={user.avatar_url}\r\n        width='60'\r\n        height='60'\r\n        alt='user'\r\n      />\r\n      <p className='users-list__item-user-name'>{user.name}</p>\r\n      <p className='users-list__item-repo-number'>{`Repo: ${user.public_repos}`}</p>\r\n    </li>\r\n  );\r\n};\r\n","import { SearchForm } from \"./search-form\";\r\nimport { UserItem } from \"./user-item\";\r\nimport { User } from \"../type-const\";\r\n\r\nexport interface Props {\r\n  user: User;\r\n}\r\n\r\nexport const MainPage: React.FC<{\r\n  users: User[];\r\n  onChangeHandler(user: User): void;\r\n}> = (props) => {\r\n  const { users, onChangeHandler } = props;\r\n\r\n  return (\r\n    <>\r\n      <header className='page-header'>\r\n        <h1 className='page-header__title'>GitHub Searcher</h1>\r\n      </header>\r\n      <main className='main-container'>\r\n        <SearchForm onChangeHandler={(user: User) => onChangeHandler(user)} />\r\n        <ul className='users-list'>\r\n          {users.map((item) => {\r\n            return <UserItem user={item} />;\r\n          })}\r\n        </ul>\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n","import { User } from \"../type-const\";\r\n\r\nexport const UserFeatures: React.FC<{ user: User }> = (props) => {\r\n  const { user } = props;\r\n  const {\r\n    name,\r\n    avatar_url,\r\n    email,\r\n    location,\r\n    created_at,\r\n    followers,\r\n    following,\r\n  } = user;\r\n\r\n  return (\r\n    <section className='user-information'>\r\n      <img\r\n        className='user-information__image'\r\n        src={avatar_url}\r\n        width='120'\r\n        height='120'\r\n        alt='user'\r\n      />\r\n      <ul className='features-list'>\r\n        <li className='features-list__item'>{name}</li>\r\n        <li className='features-list__item'>{email}</li>\r\n        <li className='features-list__item'>{location}</li>\r\n        <li className='features-list__item'>{created_at}</li>\r\n        <li className='features-list__item'>{`${followers} Followers`}</li>\r\n        <li className='features-list__item'>{`Following ${following}`}</li>\r\n      </ul>\r\n    </section>\r\n  );\r\n};\r\n","import { useEffect, useState, useRef } from \"react\";\r\nimport { Repository } from \"../type-const\";\r\nimport { createApi } from \"../services/api\";\r\nimport { findSubstring } from \"../utils\";\r\nimport swal from \"sweetalert\";\r\n\r\nconst api = createApi();\r\n\r\nexport const RepositoriesList: React.FC<{ login: string }> = (props) => {\r\n  const [repositories, setRepositories] = useState([] as Repository[]);\r\n  const [filteredRepositories, setFilteredRepositories] = useState(\r\n    [] as Repository[]\r\n  );\r\n  const inputText = useRef<HTMLInputElement>(null);\r\n  const { login } = props;\r\n\r\n  useEffect(() => {\r\n    api\r\n      .get(`${login}/repos`)\r\n      .then((response) => {\r\n        setRepositories(response.data.slice());\r\n        setFilteredRepositories(response.data.slice());\r\n      })\r\n      .catch(() => swal(\"Произошла ошибка во время получения данных\"));\r\n  }, [login]);\r\n\r\n  const onInputHandler = (): void => {\r\n    if (inputText.current!.value.trim().length > 0) {\r\n      const resultList = repositories.filter((item: Repository) => {\r\n        return findSubstring(item.name, inputText.current!.value.trim());\r\n      });\r\n      setFilteredRepositories(resultList.slice());\r\n    }\r\n  };\r\n\r\n  const onItemClickHandler = (url: string): void => {\r\n    window.open(url);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <form className='search-form'>\r\n        <input\r\n          onChange={onInputHandler}\r\n          ref={inputText}\r\n          className='search-form__input'\r\n          placeholder=\"Search for User's Repositories\"\r\n          type='text'\r\n        />\r\n      </form>\r\n      <ul className='repos-list'>\r\n        {filteredRepositories !== null &&\r\n          filteredRepositories.map((item: Repository) => {\r\n            return (\r\n              <li\r\n                onClick={() => onItemClickHandler(item.html_url)}\r\n                className='repos-list__item'\r\n              >\r\n                <p className='repos-list__repo-name'>{item.name}</p>\r\n                <div className='repos-list__detail-information'>\r\n                  <p>{`${item.forks_count} Forks`}</p>\r\n                  <p>{`${item.stargazers_count} Stars`}</p>\r\n                </div>\r\n              </li>\r\n            );\r\n          })}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n","export const findSubstring = (text: string, substring: string): boolean => {\r\n  if(text.indexOf(substring) > -1) {\r\n    return true;\r\n  }\r\n   return false;\r\n}","import { useState, useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { createApi } from \"../services/api\";\r\nimport { UserFeatures } from \"./user-features\";\r\nimport { RepositoriesList } from \"./repositories-list\";\r\nimport swal from \"sweetalert\";\r\n\r\nconst api = createApi();\r\n\r\nexport const UserInformation: React.FC = () => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n\r\n  const { userLogin } = useParams<{ userLogin?: string }>();\r\n\r\n  useEffect(() => {\r\n    api\r\n      .get(userLogin!)\r\n      .then((response) => {\r\n        setCurrentUser(response.data);\r\n      })\r\n      .catch(() => swal(\"Произошла ошибка во время получения данных\"));\r\n  }, [userLogin]);\r\n\r\n  if (currentUser === null) {\r\n    return <p>Loading</p>;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <header className='page-header'>\r\n        <h1 className='page-header__title'>GitHub Searcher</h1>\r\n      </header>\r\n      <main className='main-container'>\r\n        <UserFeatures user={currentUser!} />\r\n        <p className='user-information-biography'>\r\n          This is their biography. It may be long and needs to all fit\r\n        </p>\r\n        <RepositoriesList login={userLogin!} />\r\n      </main>\r\n    </>\r\n  );\r\n};\r\n","export const AppRoute = {\r\n  ROOT: '/',\r\n  USER: '/USER/:userLogin'\r\n}","import { useState } from \"react\";\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\nimport { MainPage } from \"./components/main-page\";\nimport { UserInformation } from \"./components/user-information\";\nimport { AppRoute } from \"./const\";\nimport { User } from \"./type-const\";\nimport \"./css/App.css\";\n\nconst App: React.FC = () => {\n  const [users, setUsers] = useState([] as User[]);\n\n  const onChangeHandler = (user: User): void => {\n    setUsers([...users, user]);\n  };\n\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route exact path={AppRoute.ROOT}>\n          <MainPage\n            users={users}\n            onChangeHandler={(user: User) => onChangeHandler(user)}\n          />\n        </Route>\n        <Route exact path={AppRoute.USER}>\n          <UserInformation />\n        </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { createApi } from \"./services/api\";\n\nconst api = createApi();\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}